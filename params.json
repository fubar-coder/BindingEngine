{"name":"Bindingengine","tagline":"The binding Engine that support Binding for all .net environment : WinForm, WPF, Web, Mono, Xamarin, etc.","body":"<strong>BindingEngine</strong></br>  \r\n===========    </br>\r\n\r\nCustom BindingEngine that support all .net environment : Winform, WPF, Web, Mono, Xamarin. etc </br>  \r\nThe goal of BindingEngine is making your ViewModel everywhere.  </br> \r\n\r\n<strong>Will add the documentation later</strong> \r\n\r\nThe original implementation of Winform binding is heavy and not powerful enough than WPF.</br>   \r\nIt does not support ICommand, Recursive Binding, etc. </br>  \r\n\r\nThe binding can be analyzed for 3 parts:</br>  \r\n<strong>>1. When</strong>    \r\n   What trigger the binding update? Usually the binding is updated via INotifyPropertyChanged's PropertyChanged event in ViewModel scenario.</br>   \r\n<strong>>2. Direction</strong></br>    \r\n   Direction of the Data Flow. OneWay, TwoWay or OneWayToSource?</br>   \r\n<strong>>3. Update</strong></br>    \r\n   After binding is triggered, the detail update strategy for different binding.</br>\r\n   The binding can work on pure Property, Collection, ICommand and Method.</br>\r\n\r\nThe use of BindingEngine:</br>    \r\n<pre><code>BindingEngine.SetXXXBinding( source, sourceProp, target, targetProp )</code></pre>, XXX can be Property, Collection, Command and Method.\r\n\r\n<pre><code>BindingEngine.SetPropertyBinding(nameTextbox, i => i.Text, DataWarehouse.Instance, o => o.MainViewModel.CurrentPerson.Name)    \r\n             .SetMode(BindMode.TwoWay)    \r\n             .AttachSourceEvent(\"TextChanged\");</code></pre>\r\nSetPropertyBinding indicates it's a Property Binding;</br>      \r\nSetMode indicates it's a TwoWay binding;</br>    \r\nAttactSourceEvent indicates the binding is triggered when TextChanged event occured on the source-->nameTextbox. </br>   \r\n<pre><code>BindingEngine.SetMethodBinding(viewModelLabel, i => i.Text, DataWarehouse.Instance, o => o.MainViewModel)    \r\n             .AttachTargetMethod<DataWarehouse>(o => o.MainViewModel, \"GetHashCode\");</code></pre>    \r\nThis binding means the Label-->viewModelLabel.Text is bind to the MainViewModel GetHashCode method.</br>  \r\n\r\nHave fun with it and appreciate for suggestion. ^_^ </br>\r\n\r\n<strong>yohan zhou</strong>   \r\nmailto:yohan.zhou@gmail.com","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}